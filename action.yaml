name: 'Dart Release Action'
description: 'Build, release, publish and deploy Dart apps (macOS, Linux, Windows).'
author: 'August Oberhauser'
branding:
  icon: 'smartphone'
  color: 'purple'
inputs:
  token:
    description: "Authorized secret GitHub Personal Access Token. Defaults to github.token"
    required: false
    default: ${{ github.token }}
  working-directory:
    description: 'Specifies the working directory where the command is run.'
    required: false
    default: './'
  dry-run:
    description: 'Whether the process should only run dry'
    required: false
    default: 'true'
  main-path:
    description: 'The Dart entry point with a `main` method'
    required: true
  app-name:
    description: 'The name of the app executable'
    required: true
  app-version:
    description: 'Semantic version of the release, see https://semver.org/'
    required: false
    default: ${{ github.ref_name }}
  tag:
    description: 'The tag of the release. Could be the same as the version. Only needed for build to upload assets.'
    required: false
    default: ${{ github.ref }}
  build-args:
    description: 'Add options such as "--define" to the dart build command'
    required: false
    default: ''
  include-paths:
    description: 'Determine which resources should be bundled for deployment. The executable is automatically included.'
    required: false
    default: ''
  # Deploy
  deploy-web-host:
    description: 'The hoster of the web app, e.g. the domain or ip address'
    required: false
    default: ''
  deploy-web-path:
    description: 'The Web servers path to your application space of the app'
    required: false
    default: ''
  deploy-web-ssh-port:
    description: 'The Web server SSH port'
    required: false
    default: ''
  deploy-web-ssh-user:
    description: 'The Web server SSH user'
    required: false
    default: ''
  deploy-web-ssh-private-key-base64:
    description: 'The private ssh key (as base64 string) of this GitHub action server'
    required: false
    default: ''
  deploy-pre-run:
    description: 'Run command on the Web server before uploading the application.'
    required: false
    default: ''
  deploy-post-run:
    description: 'Run command on the Web server after uploading the application.'
    required: false
    default: ''


outputs:
  artifact-name:
    description: "The name of the app build artifact"
    value: ${{ steps.release.outputs.artifact-name }}

runs:
  using: "composite"
  steps:
    - name: Install current bash on macOS
      if: runner.os == 'macOS'
      run: |
        brew install bash
        bash --version
      shell: bash
    - name: Prepare
      id: prepare
      # Remove leading and trailing newline, if existent.
      # Add a newline at the beginning, if string is not empty.
      # Replace newline with ` --build-arg=`
      run: |
        dart pub global activate dart_release '<1.0.0'

        ln=$'\n'
        buildArgs='${{ inputs.build-args }}'
        buildArgs=${buildArgs#$'\n'}
        buildArgs=${buildArgs%$'\n'}
        if [ ! -z "${buildArgs}" ]; then buildArgs="$ln$buildArgs"; fi
        buildArgs="${buildArgs//$'\n'/' --build-arg='}"
        echo "build-args=$(echo $buildArgs)" >> $GITHUB_OUTPUT

        includePaths='${{ inputs.include-paths }}'
        includePaths=${includePaths#$'\n'}
        includePaths=${includePaths%$'\n'}
        if [ ! -z "${includePaths}" ]; then includePaths="$ln$includePaths"; fi
        includePaths="${includePaths//$'\n'/' --include-path='}"
        echo "include-paths=$(echo $includePaths)" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Build App
      if: inputs.deploy-web-host == ''
      id: build
      run: |
        ARTIFACT_PATH=$(dart pub global run dart_release build \
          --main-path ${{ inputs.main-path }} \
          --app-name ${{ inputs.app-name }} \
          --app-version=${{ inputs.app-version }} \
          ${{ steps.prepare.outputs.build-args }} \
          ${{ steps.prepare.outputs.include-paths }} \
          | tail -1)
        ARTIFACT_NAME=$(basename "$ARTIFACT_PATH")
        echo "artifact-path=$(echo $ARTIFACT_PATH)" >> $GITHUB_OUTPUT
        echo "artifact-name=$(echo $ARTIFACT_NAME)" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Upload binaries to release
      # Only upload to GitHub if in build mode.
      if: inputs.dry-run == 'false' && inputs.deploy-web-host == ''
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ inputs.token }}
        file: ${{ inputs.working-directory }}${{ (!endsWith(inputs.working-directory, '/') && '/') || '' }}${{ steps.build.outputs.artifact-path }}
        asset_name: ${{ steps.build.outputs.artifact-name }}
        tag: ${{ inputs.tag }}
    - run: echo "${{ inputs.dry-run == 'false' && 'Release' || 'Dry run' }} for ${{ runner.os }} was successful!"
      shell: bash
      if: inputs.deploy-web-host == ''

    - name: Deploy
      if: inputs.deploy-web-host != ''
      run: |
        cat > pre-run.sh <<EOL
        ${{ inputs.deploy-pre-run }}
        EOL
        cat > post-run.sh <<EOL
          ${{ inputs.deploy-post-run }}
        EOL
        dart pub global run dart_release deploy \
          --main-path ${{ inputs.main-path }} \
          ${{ inputs.deploy-pre-run != '' && '--pre-script pre-run.sh' || '' }} \
          ${{ inputs.deploy-post-run != '' && '--post-script post-run.sh' || '' }} \
          --app-name ${{ inputs.app-name }} \
          --app-version=${{ inputs.app-version }} \
          ${{ steps.prepare.outputs.build-args }} \
          ${{ steps.prepare.outputs.include-paths }} \
          --host=${{ inputs.deploy-web-host }} \
          --path=${{ inputs.deploy-web-path }} \
          --ssh-port=${{ inputs.deploy-web-ssh-port }} \
          --ssh-user=${{ inputs.deploy-web-ssh-user }} \
          --ssh-private-key-base64=${{ inputs.deploy-web-ssh-private-key-base64 }} \
          ${{ inputs.dry-run != 'false' && '--dry-run' || '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
